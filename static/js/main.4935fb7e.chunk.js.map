{"version":3,"sources":["components/Buttons/Buttons.module.css","components/Buttons/Buttons.tsx","components/Display/Display.tsx","redux/reducer.ts","components/DisplaySettings/DisplaySettings.tsx","App.tsx","redux/store.ts","index.tsx","components/DisplaySettings/DisplaySettings.module.css","components/Display/Display.module.css"],"names":["module","exports","Buttons","props","correctIsDisabled","state","value","maxValue","className","styles","buttons","onClick","increment","disabled","reset","startValue","Display","correctClassName","wrapper","display","error","initState","setValueAC","type","DisplaySettings","useState","setStartValue","setMaxValue","dispatch","useDispatch","useEffect","maxValueStr","localStorage","getItem","startValueStr","valueStr","JSON","parse","setItem","stringify","displaySettings","item","style","background","placeholder","onChange","event","valueTarget","currentTarget","setBTN","onClickSet","App","useSelector","resetAC","values","setStartAndMaxValuesAC","store","createStore","action","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4935fb7e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttons\":\"Buttons_buttons__2vQHy\"};","import styles from './Buttons.module.css'\r\nimport {StateType} from \"../../redux/reducer\";\r\n\r\ntype ButtonsPropsType = {\r\n  increment: () => void\r\n  reset: (startValue: number) => void\r\n  state: StateType\r\n}\r\n\r\nexport function Buttons(props: ButtonsPropsType) {\r\n  const correctIsDisabled = props.state.value === props.state.maxValue\r\n\r\n  return (\r\n      <div className={styles.buttons}>\r\n        <button\r\n            onClick={props.increment}\r\n            disabled={correctIsDisabled}\r\n        >\r\n          inc\r\n        </button>\r\n        <button\r\n            onClick={() => props.reset(props.state.startValue)}\r\n            className={props.state.value === 0 ? 'disabled' : ''}\r\n        >\r\n          res\r\n        </button>\r\n      </div>\r\n  )\r\n}\r\n","import React from \"react\";\r\nimport {Buttons} from \"../Buttons/Buttons\";\r\nimport styles from './Display.module.css'\r\nimport {StateType} from \"../../redux/reducer\";\r\n\r\ntype DisplayPropsType = {\r\n  increment: () => void\r\n  reset: (startValue: number) => void\r\n  state: StateType\r\n}\r\n\r\nexport function Display(props: DisplayPropsType) {\r\n  const correctClassName = (\r\n      props.state.value === props.state.maxValue ? 'stopValue' : ''\r\n  )\r\n\r\n  const renderJSX = () => {\r\n    if (props.state.maxValue >= props.state.startValue) {\r\n      return (\r\n          <div className={styles.display}>\r\n            <span className={correctClassName}>\r\n              {props.state.value}\r\n            </span>\r\n          </div>\r\n      )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n          <span className={styles.error}>\r\n            не корректное значение\r\n          </span>\r\n        </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n      <div className={styles.wrapper}>\r\n        {renderJSX()}\r\n        <Buttons\r\n            increment={props.increment}\r\n            reset={props.reset}\r\n            state={props.state}\r\n        />\r\n      </div>\r\n  )\r\n}\r\n","type ActionType = incrementAT | resetAT | setStartAndMaxValuesAT | setValueAT\r\n\r\ntype incrementAT = {\r\n  type: 'INCREMENT'\r\n}\r\n\r\ntype resetAT = {\r\n  type: 'RESET'\r\n  startValue: number\r\n}\r\n\r\ntype setStartAndMaxValuesAT = {\r\n  type: 'SET-START-AND-MAX-VALUES'\r\n  values: {\r\n    startValue: number\r\n    maxValue: number\r\n  }\r\n}\r\n\r\ntype setValueAT = {\r\n  type: 'SET-VALUE'\r\n  value: number\r\n}\r\n\r\nexport type StateType = {\r\n  startValue: number\r\n  maxValue: number\r\n  value: number\r\n}\r\n\r\nconst initState = {\r\n  startValue: 0,\r\n  maxValue: 0,\r\n  value: 0\r\n}\r\n\r\nexport const reducer = (state: StateType = initState, action: ActionType) => {\r\n  switch (action.type) {\r\n    case \"INCREMENT\":\r\n      return {\r\n        ...state,\r\n        value: state.value + 1\r\n      }\r\n\r\n    case \"RESET\":\r\n      return {\r\n        ...state,\r\n        value: action.startValue\r\n      }\r\n\r\n    case \"SET-START-AND-MAX-VALUES\":\r\n      return {\r\n        ...state,\r\n        startValue: action.values.startValue,\r\n        maxValue: action.values.maxValue\r\n      }\r\n\r\n    case \"SET-VALUE\":\r\n      return {\r\n        ...state,\r\n        value: action.value\r\n      }\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const incrementAC = (): incrementAT => {\r\n  return {\r\n    type: 'INCREMENT'\r\n  }\r\n}\r\n\r\nexport const resetAC = (startValue: number): resetAT => {\r\n  return {\r\n    type: 'RESET',\r\n    startValue\r\n  }\r\n}\r\n\r\nexport const setValueAC = (value: number): setValueAT => {\r\n  return {\r\n    type: 'SET-VALUE',\r\n    value\r\n  }\r\n}\r\n\r\nexport const setStartAndMaxValuesAC = (\r\n    startValue: number,\r\n    maxValue: number,\r\n): setStartAndMaxValuesAT => {\r\n  return {\r\n    type: 'SET-START-AND-MAX-VALUES',\r\n    values: {startValue, maxValue}\r\n  }\r\n}\r\n","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\nimport styles from './DisplaySettings.module.css'\r\nimport {setValueAC, StateType} from \"../../redux/reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\ntype DisplaySettingsPropsType = {\r\n  state: StateType\r\n  onClickSet: (startValue: number, maxValue: number) => void\r\n}\r\n\r\nexport function DisplaySettings(props: DisplaySettingsPropsType) {\r\n  const [startValue, setStartValue] = useState('')\r\n  const [maxValue, setMaxValue] = useState('')\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const maxValueTarget = (event: ChangeEvent<HTMLInputElement>) => {\r\n    let valueTarget = event.currentTarget.value\r\n\r\n    if (+valueTarget >= 1) {\r\n      setMaxValue(valueTarget)\r\n    }\r\n  }\r\n  const startValueTarget = (event: ChangeEvent<HTMLInputElement>) => {\r\n    let valueTarget = event.currentTarget.value\r\n\r\n    if (+valueTarget >= 0) {\r\n      setStartValue(valueTarget)\r\n    }\r\n  }\r\n  const handlerClick = () => {\r\n    props.onClickSet(+startValue, +maxValue)\r\n    dispatch(setValueAC(+startValue))\r\n  }\r\n\r\n  useEffect(() => {\r\n    let maxValueStr = localStorage.getItem('maxValue')\r\n    let startValueStr = localStorage.getItem('startValue')\r\n    let valueStr = localStorage.getItem('value')\r\n\r\n    if (maxValueStr && startValueStr && valueStr) {\r\n      setMaxValue(JSON.parse(maxValueStr))\r\n      setStartValue(JSON.parse(startValueStr))\r\n\r\n      dispatch(setValueAC(JSON.parse(valueStr)))\r\n    }\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('maxValue', JSON.stringify(maxValue))\r\n    localStorage.setItem('startValue', JSON.stringify(startValue))\r\n    localStorage.setItem('value', JSON.stringify(props.state.value))\r\n  }, [maxValue, startValue, props.state.value])\r\n\r\n  return (\r\n      <div className={styles.wrapper}>\r\n        <div className={styles.displaySettings}>\r\n          <div className={styles.item}>\r\n            <span>max value:</span>\r\n            <input\r\n                type='number'\r\n                value={maxValue}\r\n                // /* ?? className */\r\n                style={\r\n                     props.state.maxValue < props.state.startValue\r\n                         ? {background: 'red'}\r\n                         : {background: 'white'}\r\n                }\r\n                placeholder=''\r\n                onChange={maxValueTarget}\r\n            />\r\n          </div>\r\n\r\n          <div className={styles.item}>\r\n            <span>start value:</span>\r\n            <input type='number'\r\n                   value={startValue}\r\n                   style={\r\n                     props.state.startValue > props.state.maxValue || props.state.startValue < 0\r\n                         ? {background: 'red'}\r\n                         : {background: 'white'}\r\n                   }\r\n                   placeholder=''\r\n                   onChange={startValueTarget}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className={styles.setBTN}>\r\n          <button onClick={handlerClick}>set</button>\r\n        </div>\r\n      </div>\r\n  )\r\n}\r\n","import './App.css';\nimport {Display} from \"./components/Display/Display\";\nimport {DisplaySettings} from \"./components/DisplaySettings/DisplaySettings\";\nimport React from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"./redux/store\";\nimport {\n  incrementAC,\n  resetAC,\n  setStartAndMaxValuesAC,\n  StateType\n} from \"./redux/reducer\";\n\n\nfunction App() {\n  const dispatch = useDispatch()\n  const state = useSelector<AppRootStateType, StateType>(state => state)\n\n  const onClickSet = (startValue: number, maxValue: number) => {\n    dispatch(setStartAndMaxValuesAC(startValue, maxValue))\n  }\n  const increment = () => {\n    dispatch(incrementAC())\n  }\n  const reset = (startValue: number) => {\n    dispatch(resetAC(startValue))\n  }\n\n  return (\n      <div className='app-wrapper'>\n        <Display\n            increment={increment}\n            reset={reset}\n            state={state}\n        />\n        <DisplaySettings\n            state={state}\n            onClickSet={onClickSet}\n        />\n      </div>\n  )\n}\n\nexport default App\n","import {createStore} from \"redux\";\r\nimport {reducer} from \"./reducer\";\r\n\r\nexport const store = createStore(reducer)\r\n\r\nexport type AppRootStateType = ReturnType<typeof reducer>\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./redux/store\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root')\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"DisplaySettings_wrapper__Y_29I\",\"displaySettings\":\"DisplaySettings_displaySettings__2Mbs7\",\"item\":\"DisplaySettings_item__1Fc1a\",\"setBTN\":\"DisplaySettings_setBTN__2FW4e\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Display_wrapper__30pkP\",\"display\":\"Display_display__2MPrd\",\"error\":\"Display_error__d5CBm\"};"],"sourceRoot":""}